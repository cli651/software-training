#+TITLE: Week 3
#+AUTHOR: Sahit Chintalapudi, Kristaps Berzinch, Raymond Ortiz
#+EMAIL: schintalapudi@gatech.edu, kristaps@robojackets.org, rortiz9@gatech.edu

* What are we doing today?
- An introduction to the /Standard Library/
  - Built-in Data Structures
  - Built-in Algorithms 
- Color Detection with the STSL

* The Standard Library (STL)
- "a collection of classes and functions, which are written in the core
  language and part of the C++ ISO Standard itself" (+wikipedia+ The C++
  Standard).
- Everything we work with is declared under the ~std~ namespace.

* Containers
- Data structures in the STL that store a collection of other objects are
  called /containters/
- Examples of Containers include ~std::set~, ~std::priority_queue~,
  or ~std::vector~. Today we'll look at the latter
- Containers are parameterized by a /template arguments/, which dictate what
  type of data the container stores. 

* Vectors
#+BEGIN_NOTES
initializer lists require c++11 for vectors.
#+END_NOTES
- an object that can contain a variable number of other objects (like ArrayList in Java)
- you can keep adding elements to the vector
- order of insertion is maintained 
#+BEGIN_SRC C++
  #include <vector>

  std::vector<int> numbers = {1, 2, 3};
#+END_SRC
- In this example, the vector is passed the type ~int~ as its template argument, meaning it can only store ~int~s

* Vector methods
#+BEGIN_NOTES
Vectors can grow as items are added, whereas arrays are static.
#+END_NOTES
| =at= or =[]= | returns the value at a specific index |
| =front=     | returns the first item                |
| =back=      | returns the last item                 |
| =size=      | returns the number of elements        |
| =clear=     | removes all items                   |
| =insert=    | inserts an item at a specific index |
| =push_back= | adds a given element to the end     |
| =pop_back=  | removes the last element            |

* Playing with Vectors
#+BEGIN_SRC C++
      #include <vector>
      #include <string>
      #include <iostream>
      using namespace std;
      int main() {
            vector<string> trainers = {"Evan 1", "Evan 2", "Jason", "Andrew"};
            cout << "There are: " << trainers.size() << " trainers" << endl;
            
            trainers.push_back("Dallas");
            trainers.push_back("Woodward");

            cout << "Actually, there are: " << trainers.size() << " trainers" << endl;
      }
#+END_SRC

* More vector examples
#+BEGIN_NOTES
We'll get to begin() and end() later
#+END_NOTES

#+BEGIN_SRC C++
      #include <vector>
      #include <string>
      #include <iostream>
      using namespace std;
     
      int main() {
            vector<string> trainers = {"Evan 1", "Evan 2", "Jason", "Andrew"};
            trainers.push_back("Dallas");
            trainers.push_back("Woodward");

            //Can't forget about the OG trainer. He goes first
            trainers.insert(trainers.begin(), "Matt");
            trainers.insert(trainers.end(), "Sahit");

            //This part is a metaphor for something
            cout << "There are "  << trainers.size() << " trainers" << endl;
            cout << "The 1st trainer is " << trainers.at(0) << endl;
            cout << "The last trainer is " << trainers.at(trainers.size() -1) << endl;
      }
#+END_SRC


* Iterators
- An object that lets you access and modify objects in a container
- Depending on their type, they will let you read or write data in the container, and move forwards, backwards, or both
- The containers library includes the most common ones you'll need, but you can also write your own

* Iterator methods
#+BEGIN_NOTES
picture upcoming. mention that the method should be called on the containing object
#+END_NOTES
| =*=      | gets the value at the current index                               |
| =begin=  | starts at the *first* item and moves *forwards* when incremented  |
| =end=    | starts at the *last* item and moves *forwards* when incremented   |
| =rbegin= | starts at the *last* item and moves *backwards* when incremented  |
| =rend=   | starts at the *first* item and moves *backwards* when incremented |

* Moving iterators
#+BEGIN_NOTES
picture upcoming
#+END_NOTES
- =++= increments the iterator forwards
- =--= decrements the iterator backwards

* Iterator practice
#+BEGIN_NOTES
requires c++ 11.
#+END_NOTES
#+BEGIN_SRC C++
  vector<int> vec = {66,89,0,60,17,90,8};
  vector<int>::iterator it = vec.begin();
#+END_SRC
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/MTaVFFM.png]]

#+REVEAL: split
#+BEGIN_SRC C++
  vector<int> vec = {66,89,0,60,17,90,8};
  vector<int>::iterator it = vec.begin();
  it++;
#+END_SRC
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/gOXGy4i.png]]

#+REVEAL: split
#+BEGIN_SRC C++
  vector<int> vec = {66,89,0,60,17,90,8};
  vector<int>::iterator it = vec.begin();
  it++;
  it--;
#+END_SRC
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/394eVwQ.png]]

#+REVEAL: split
#+BEGIN_NOTES
ask what is the result of this code. Call someone up to show where it will end up
#+END_NOTES
#+BEGIN_SRC C++
  vector<int> vec = {66,89,0,60,17,90,8};
  vector<int>::reverse_iterator it = vec.rbegin();
  it += 3;
#+END_SRC
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/wrsXiAZ.png]]

#+REVEAL: split
#+BEGIN_NOTES
write some for loops using iterators and printing out the numbers
#+END_NOTES
#+BEGIN_SRC C++
  vector<int> vec = {66,89,0,60,17,90,8};
  vector<int>::reverse_iterator it = vec.rbegin();
  it += 3;
#+END_SRC
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/BMO9nL9.png]]

 
* Algorithms
- algorithms is a header that includes useful operators that can be used on vectors, arrays and other containers
- uses iterators to interact with these containers
- three cateorgies of algorithm methods
  - does not modify the container
  - modifies the container
  - modifies a destination container

* Modifies the container
| =sort=      | sorts a container                                     |
| =fill=      | fills a container with copies of a given element      |
| =iota=      | fills a container with sequentially increasing values |
| =transform= | manipulates each element using a function             |
| =reverse=   | Reverses the order of the elements                    |

* Algorithm examples 
#+BEGIN_SRC C++
#include <vector>
#include <iterator>
#include <algorithm>

int main()
{
      std::vector<int> v{2, 1, 5, 4, 3};

      //this changes v to {1, 2, 3, 4, 5}
      std::sort(v.begin(), v.end()); 

      //this changes v to {5, 4, 3, 2, 1}
      std::reverse(v.begin(), v.end());
}
#+END_SRC

* Does not modify the container
| =count=      | counts the number of items in a container that match a given item  |
| =find=       | returns an iterator to the first element that matches a given item |
| =accumulate= | sums all elements in a container                                   |

* Modifies destination container
| =copy= | copies elements from one container to another |

* How to use these algorithms
#+BEGIN_SRC C++
#include <vector>
#include <iterator>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;
int main() {
      vector<string> rr_robots = {"Macaroni", "Bigoli", "Sedani"};
      vector<string> igvc_robots = {"Woodi", "Jessi"};

      //I hope Bigoli is functional by the time these slides are delivered
      int working_robots = std::count(igvc_robots.begin(), igvc_robots.end(), "Bigoli");
      cout << working_robots << endl;

      working_robots = count(rr_robots.begin(), rr_robots.end(), "Bigoli");
      cout << working_robots << endl;

      //what size is my_list?
      vector<int> my_list(rr_robots.size() + igvc_robots.size());
      iota(my_list.begin(), my_list.end(), 0);

      //what do you think is in sum?
      int sum = accumulate(my_list.begin(), my_list.end(), 0);
      cout << sum << endl;

}

#+END_SRC

* Robot time!
- TODO: example of using color detector from STSL

* Challenge 
- Drive over the several gray strips and identify the strip closest to the median intensity
- Drive back to the strip of median intensity
